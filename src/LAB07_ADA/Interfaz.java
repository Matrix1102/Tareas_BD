
package LAB07_ADA;

import java.awt.BorderLayout;

/**
 *
 * @author MATHIAS TORRES
 */
public final class Interfaz extends javax.swing.JFrame {
    private TablaHashLineal lineal;
    private TablaHashChainingBST chaining;
    private javax.swing.JTextArea output;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnComparar;
    private final int tamañoTabla = 101;

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        lineal = new TablaHashLineal(tamañoTabla);
        chaining = new TablaHashChainingBST(tamañoTabla);
        
        initComponents();
        misComponentes();
        listeners();
        
        pack();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void misComponentes(){
        getContentPane().setLayout(new BorderLayout());
        
        javax.swing.JPanel panelBotones = new javax.swing.JPanel();
        btnInsertar = new javax.swing.JButton("Insertar Clientes Aleatorios");
        btnBuscar   = new javax.swing.JButton("Buscar Cliente Ejemplo");
        btnComparar = new javax.swing.JButton("Comparar Rendimiento");
        panelBotones.add(btnInsertar);
        panelBotones.add(btnBuscar);
        panelBotones.add(btnComparar);

        // Área de texto
        output = new javax.swing.JTextArea(15, 50);
        output.setEditable(false);
        javax.swing.JScrollPane scroll = new javax.swing.JScrollPane(output);

        // Añade al layout que NetBeans creó (usando BorderLayout o tu layout actual)
        getContentPane().add(panelBotones, BorderLayout.NORTH);
        getContentPane().add(scroll,       BorderLayout.CENTER);

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Interfaz().setVisible(true);
        });
    }
    
    private void listeners(){
        btnInsertar.addActionListener(e -> insertarAleatorios(100));
        btnBuscar  .addActionListener(e -> buscarEjemplo());
        btnComparar.addActionListener(e -> compararTiempos());
    }
    
    private void insertarAleatorios(int n) {
        output.append("Insertando " + n + " clientes...\n");
        java.util.Random rnd = new java.util.Random();
        for (int i = 0; i < n; i++) {
            String nom = "Nom" + i;
            String ape = "Ape" + i;
            Cliente c = new Cliente(
                String.format("C%04d", i),
                nom, ape,
                "999" + rnd.nextInt(9000),
                "email"+i+"@ej.com",
                "Dir"+i,
                String.valueOf(1000 + i)
            );
            lineal.insertar(c);
            chaining.insertar(c);
        }
        output.append("Listo.\n\n");
    }

    private void buscarEjemplo() {
        Cliente c = lineal.buscar("Ape50", "Nom50");
        output.append("Lineal: " + (c!=null?c:"No encontrado") + "\n");
        c = chaining.buscar("Ape50", "Nom50");
        output.append("Chaining: " + (c!=null?c:"No encontrado") + "\n\n");
    }

    private void compararTiempos() {
        int rep = 10000;
        long t0 = System.nanoTime();
        for (int i = 0; i < rep; i++) {
            lineal.buscar("Ape"+(i%1000), "Nom"+(i%1000));
        }
        double tLineal = (System.nanoTime() - t0)/1e6;

        t0 = System.nanoTime();
        for (int i = 0; i < rep; i++) {
            chaining.buscar("Ape"+(i%1000), "Nom"+(i%1000));
        }
        double tChain = (System.nanoTime() - t0)/1e6;

        output.append(String.format(
            "Búsq. Lineal: %.2f ms\nBúsq. Chaining: %.2f ms\nFactor carga: %.2f\n\n",
            tLineal, tChain, lineal.factorCarga()
        ));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
